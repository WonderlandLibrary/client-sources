package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.component.impl.render.NotificationComponent;
import com.alan.clients.event.Listener;
import com.alan.clients.event.annotations.EventLink;
import com.alan.clients.event.impl.motion.PreMotionEvent;
import com.alan.clients.event.impl.other.TeleportEvent;
import com.alan.clients.event.impl.other.WorldChangeEvent;
import com.alan.clients.event.impl.packet.PacketSendEvent;
import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.util.packet.PacketUtil;
import com.alan.clients.util.player.DamageUtil;
import com.alan.clients.util.player.MoveUtil;
import com.alan.clients.value.Mode;
import com.alan.clients.value.impl.BooleanValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import rip.vantage.commons.util.time.StopWatch;

import java.util.concurrent.ConcurrentLinkedQueue;

public class Verus2Disabler extends Mode<Disabler> {
    private final BooleanValue movementDisabler = new BooleanValue("Movement", this, false);
    private final BooleanValue sprintDisabler = new BooleanValue("Sprint", this, false);
    private final BooleanValue DamagePlayer = new BooleanValue("Damage", this, false);
    private final ConcurrentLinkedQueue<Packet<?>> transactions = new ConcurrentLinkedQueue<>();
    private final ConcurrentLinkedQueue<Packet<?>> keepAlives = new ConcurrentLinkedQueue<>();

    private boolean teleported;
    private final StopWatch stopWatch = new StopWatch();
    private int lastHurtTime = 0;
    public Verus2Disabler(String name, Disabler parent) {
        super(name, parent);
    }

    public void onEnable() {
        NotificationComponent.post("Verus Movement Disabler", "wait for damage from disabler or otherwise", 3000);
    }
    @EventLink
    public final Listener<PreMotionEvent> onPreMotionEvent = event -> {



        if (movementDisabler.getValue()) {
            lastHurtTime++;
            if (mc.thePlayer.ticksExisted % 100 == 0) {

                PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.onGround));
                PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, -0.015625, mc.thePlayer.posZ, false));
                PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.onGround));

                teleported = true;
            }

            if (stopWatch.finished(500L) && !transactions.isEmpty()) {
                PacketUtil.sendNoEvent(transactions.poll());

                stopWatch.reset();
            }

            if (DamagePlayer.getValue()) {
                if (mc.thePlayer.ticksExisted % 200 == 0) {
                    if (lastHurtTime >= 100) {
                        DamageUtil.damagePlayer(DamageUtil.DamageType.POSITION, 3.42F, 1, false, false);
                    }
                }

                if ( lastHurtTime > 101) {
                    NotificationComponent.post("Verus Movement Disabler", "you must get damaged now", 3000);
                }
            }
        }

        if (mc.thePlayer.hurtTime > 0) {
            lastHurtTime = 0;
        }

        if (stopWatch.finished(400L) && !keepAlives.isEmpty()) {
            PacketUtil.sendNoEvent(keepAlives.poll());

            stopWatch.reset();
        }

        if (sprintDisabler.getValue() && MoveUtil.isMoving()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer,
                    mc.thePlayer.ticksExisted % 2 == 0 ? C0BPacketEntityAction.Action.STOP_SPRINTING :
                            C0BPacketEntityAction.Action.START_SPRINTING));
        }
    };

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet<?> packet = event.getPacket();

        if (sprintDisabler.getValue() && packet instanceof C0BPacketEntityAction) {
            C0BPacketEntityAction c0b = ((C0BPacketEntityAction) packet);

            if (c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING ||
                    c0b.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                event.setCancelled();
            }
        }

        if (movementDisabler.getValue()) {
            if (packet instanceof C0FPacketConfirmTransaction) {
                transactions.add(packet);
                event.setCancelled();

                if (transactions.size() > 300) {
                    PacketUtil.sendNoEvent(transactions.poll());
                }
            }

            if (packet instanceof C00PacketKeepAlive) {
                final C00PacketKeepAlive c00 = (C00PacketKeepAlive) packet;

                c00.key -= 30;
                keepAlives.add(c00);
                event.setCancelled();
            }
        }
    };

    @EventLink
    public final Listener<TeleportEvent> onTeleport = event -> {
        if (movementDisabler.getValue()) {
            if (teleported) {
                event.setCancelled();
            }

            teleported = false;
        }
    };

    @EventLink
    public final Listener<WorldChangeEvent> onWorldChange = event -> {
        NotificationComponent.post("Verus Movement Disabler", "wait for damage from disabler or otherwise", 3000);
        transactions.clear();
        keepAlives.clear();
        teleported = false;
    };
}

