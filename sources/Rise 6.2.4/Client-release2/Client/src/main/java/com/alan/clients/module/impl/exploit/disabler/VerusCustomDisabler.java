package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.component.impl.player.PingSpoofComponent;
import com.alan.clients.component.impl.render.NotificationComponent;
import com.alan.clients.event.Listener;
import com.alan.clients.event.annotations.EventLink;
import com.alan.clients.event.impl.motion.PostStrafeEvent;
import com.alan.clients.event.impl.motion.PreMotionEvent;
import com.alan.clients.event.impl.packet.PacketReceiveEvent;
import com.alan.clients.event.impl.packet.PacketSendEvent;
import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.module.impl.movement.Flight;
import com.alan.clients.module.impl.movement.Speed;
import com.alan.clients.util.packet.PacketUtil;
import com.alan.clients.util.player.MoveUtil;
import com.alan.clients.value.Mode;
import com.alan.clients.value.impl.BooleanValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

public class VerusCustomDisabler extends Mode<Disabler> {

    private final BooleanValue movementDisabler = new BooleanValue("Movement", this, false);
    private final BooleanValue sprintDisabler = new BooleanValue("Sprint", this, false);

    private Flight flight = null;
    private Speed speed = null;
    private int disable;

    public VerusCustomDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink
    public final Listener<PreMotionEvent> onPreMotionEvent = event -> {
        if (sprintDisabler.getValue() && MoveUtil.isMoving() && mc.thePlayer.ticksExisted > 50) {
           if (mc.thePlayer.ticksExisted % 5 == 0) {
               if (mc.thePlayer.ticksExisted % 10 == 0) {
                   PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer,
                           C0BPacketEntityAction.Action.START_SPRINTING));
               } else {
                   PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer,
                           C0BPacketEntityAction.Action.STOP_SPRINTING));
               }
           }
        }
    };

    @EventLink
    public final Listener<PacketReceiveEvent> onPacketReceive = event -> {
        Packet<?> packet = event.getPacket();

        if (packet instanceof S08PacketPlayerPosLook) {
            S08PacketPlayerPosLook posLook = ((S08PacketPlayerPosLook) packet);

            disable = -20;
        }

    };

    @EventLink
    public final Listener<PostStrafeEvent> onPostStrafeEvent = event -> {
        if (movementDisabler.getValue()) {
            int time = 9;

            disable++;

            if (mc.thePlayer.ticksExisted > time * 20 && disable > 0) {
                PingSpoofComponent.spoof(time * 1000, true, false, true, false);
            }

            if (mc.thePlayer.ticksSincePlayerVelocity > 20 * (time) || disable <= 0 || mc.thePlayer.ticksExisted <= time * 2 * 20) {
                if (speed == null) {
                    speed = getModule(Speed.class);
                }

                if (speed.isEnabled()) {
                    speed.toggle();
                    MoveUtil.stop();
                    NotificationComponent.post("Auto Toggle", "Automatically disabled Speed to prevent flags", 1000);
                }
            }

            if (mc.thePlayer.ticksSincePlayerVelocity > 20 * (time / 2) || disable <= 0 || mc.thePlayer.ticksExisted <= time * 2 * 20) {
                if (flight == null) {
                    flight = getModule(Flight.class);
                }

                if (flight.isEnabled()) {
                    flight.toggle();
                    NotificationComponent.post("Auto Toggle", "Automatically disabled Flight to prevent flags", 1000);
                }
            }
        }
    };

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet<?> packet = event.getPacket();

        if (sprintDisabler.getValue() && packet instanceof C0BPacketEntityAction) {
            C0BPacketEntityAction c0b = ((C0BPacketEntityAction) packet);

            if (c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING ||
                    c0b.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                event.setCancelled();
            }
        }
    };

}