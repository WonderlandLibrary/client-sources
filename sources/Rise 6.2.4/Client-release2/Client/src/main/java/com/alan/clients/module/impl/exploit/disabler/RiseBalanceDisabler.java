package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.component.impl.player.BadPacketsComponent;
import com.alan.clients.component.impl.player.BlinkComponent;
import com.alan.clients.component.impl.player.PingSpoofComponent;
import com.alan.clients.event.Listener;
import com.alan.clients.event.Priorities;
import com.alan.clients.event.annotations.EventLink;
import com.alan.clients.event.impl.motion.PreMotionEvent;
import com.alan.clients.event.impl.motion.PreUpdateEvent;
import com.alan.clients.event.impl.other.WorldChangeEvent;
import com.alan.clients.event.impl.packet.PacketSendEvent;
import com.alan.clients.event.impl.render.Render2DEvent;
import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.util.chat.ChatUtil;
import com.alan.clients.value.Mode;
import com.alan.clients.value.impl.BooleanValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import rip.vantage.commons.util.time.StopWatch;

public class RiseBalanceDisabler extends Mode<Disabler> {

    private final BooleanValue resetOnWorldChange = new BooleanValue("Reset On World Change", this, false);
    private final BooleanValue forceLowTimer = new BooleanValue("Force low timer when Balance is below 0", this, false);
    private final BooleanValue display = new BooleanValue("Display", this, false);
    private final BooleanValue pulse = new BooleanValue("Pulse", this, false);
    private final BooleanValue hypixel = new BooleanValue("Hypixel", this, false);
    private final BooleanValue onlyWhenStill = new BooleanValue("Only Still", this, false);

    private double balance = 0;
    private final StopWatch stopWatch = new StopWatch();
    private final StopWatch lastSend = new StopWatch();

    public RiseBalanceDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @Override
    public void onEnable() {
        this.reset();
    }

    @Override
    public void onDisable() {
        BlinkComponent.blinking = false;
    }

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        Packet<?> packet = event.getPacket();

        if (packet instanceof C03PacketPlayer) {
            C03PacketPlayer c03PacketPlayer = ((C03PacketPlayer) packet);

            if (!c03PacketPlayer.getRotating() && !c03PacketPlayer.isMoving() && !BadPacketsComponent.bad() &&
                    (!onlyWhenStill.getValue() || (mc.thePlayer.posX == mc.thePlayer.lastTickPosX && mc.thePlayer.posY == mc.thePlayer.lastTickPosY && mc.thePlayer.posZ == mc.thePlayer.lastTickPosZ))) {
                event.setCancelled();
            }

            // We use this instead of an else because some other modules might cancel c03s
            if (!event.isCancelled() || BlinkComponent.blinking) {
                this.balance -= 50;
            }

            this.balance += stopWatch.getElapsedTime();
            this.stopWatch.reset();
        }
    };

    @EventLink(value = Priorities.VERY_LOW)
    public final Listener<PreUpdateEvent> onPreUpdate = event -> {
        if (this.hypixel.getValue()) {
            PingSpoofComponent.spoof(14000, true, false, false, false);
        }
    };

    @EventLink
    public final Listener<PreMotionEvent> onPreMotionEvent = event -> {
        if (mc.thePlayer.ticksExisted % 20 == 0 && this.display.getValue()) {
            ChatUtil.display("Balance: " + this.balance);
        }

        if (this.pulse.getValue() && mc.timer.timerSpeed > 1) {
            BlinkComponent.blinking = true;
            if (lastSend.finished(50 * 9)) {
                lastSend.reset();
                BlinkComponent.dispatch();
            }
        }
    };

    @EventLink
    public final Listener<WorldChangeEvent> onWorldChange = event -> {
        if (this.resetOnWorldChange.getValue()) {
            this.reset();
            this.balance = 0;
        }
    };

    private void reset() {
        this.balance = 0;
        this.stopWatch.reset();
    }

    @EventLink
    public final Listener<Render2DEvent> onRender2D = event -> {
        if (this.forceLowTimer.getValue() && this.balance < 200) {
            mc.timer.timerSpeed = this.balance < 0 ? 0.5f : 1;
        }
    };
}